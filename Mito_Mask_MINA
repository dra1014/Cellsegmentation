from pathlib import Path
import tifffile
import matplotlib,pylab as plt
import numpy as np
import matplotlib as mpl
from skimage import io, img_as_ubyte
from skimage.filters import gaussian
import skimage.io
from skimage import exposure
from scipy import ndimage
from skimage import filters
from skimage import measure
from PIL import Image

mpl.rcParams['figure.dpi'] = 300

path_dataset = Path(r"Z:\skala\Andy\Diff_3rd\Day15_20230610\150k_8uM_Mito_Day15\Test")
list_images = list(path_dataset.glob("*.tif"))
for path_image in list_images[:693]:
    im = tifffile.imread(path_image)

    # Unsharp_Mask
    duplicate_image = im.copy()
    normalized_image = duplicate_image.astype(float) / 255.0
    blurred_image = gaussian(normalized_image, sigma=20, multichannel=True)
    mask = normalized_image - blurred_image
    amount = 5
    sharpened_image = normalized_image + amount * mask
    sharpened_image = np.clip(sharpened_image, 0, 1)
    sharpened_image = img_as_ubyte(sharpened_image)

    # CLAHE
    input_image = skimage.img_as_float64(sharpened_image)
    input_image = exposure.rescale_intensity(input_image)
    clahe_image = exposure.equalize_adapthist(input_image, clip_limit=0.03)
    clahe_image = exposure.rescale_intensity(clahe_image)
    clahe_image = skimage.img_as_ubyte(clahe_image)

    # Median filter
    median_filtered_image = ndimage.median_filter(clahe_image, size=3)

    # Autothreshold
    if median_filtered_image.ndim > 2:
        median_filtered_image = skimage.color.rgb2gray(median_filtered_image)
    threshold_value = filters.threshold_otsu(median_filtered_image)
    binary_image = median_filtered_image > threshold_value

    # Remove small objects
    new_binary_image = np.array(binary_image)
    labels = measure.label(new_binary_image)
    regions = measure.regionprops(labels)
    threshold = 50
    region_areas = np.array([region.area for region in regions])
    cleaned_image = np.where(
        np.isin(labels, np.where(region_areas >= threshold)[0] + 1),
        binary_image,
        0
    )
    cleaned_image_pil = Image.fromarray(np.uint8(cleaned_image))

    # Save and display the processed image
    path_output = path_dataset / "Mito_Mask"
    filename_mask = path_image.stem + "_mito_mask.tiff"
    tifffile.imwrite(path_output / filename_mask, cleaned_image.astype(dtype=np.uint32))
    plt.imshow(cleaned_image)
    plt.show()
